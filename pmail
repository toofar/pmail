#!/usr/bin/env python
from __future__ import with_statement

"""
pmail -- command line SMTP interface.

You can feed pmail a pre-constructed email message on stdin. You can
also specify any relevant header values on the command line. Anything on the
command line takes precedence over values in pmailrc (or on stdin in the case
of 'From:'). Most command line arguments can be specified multiple
times.

If any of the necessary values (To, From, Subject, Body) are missing an
editor will be called up to give you a chance to edit the message. If
you wan't to open up an editor even
if you have provided all the values use the -e|--editor argument.

If you don't want an editor to open up at any time use the
-n|--no-editor argument. If you provide at a minimum To, From and
(Subject or Body) then the email will (hopefully) be sent. Otherwise the
file will be saved to a file in /tmp for you to examine.

The BCC and Attach headers in the editor are never sent. They are just so you
can add a BCC list and attachments from a text editor.

-t|--to and the positional argument do the same thing, except -t can be
specified mutiple times. They can both be present on the same command.

Currently doesn't support SSL.
"""

# Parse INI
import ConfigParser
import os
import sys
from urllib import quote

# Set config
config_file = os.path.expanduser('~/.pmailrc')
if not os.path.exists(config_file):
    config_file = '/etc/pmailrc'

smtpserver, port, from_addr, password, maildir = False, False, False, False, False
if os.path.isfile(config_file):
    config_defaults = {'smtpserver':None,
                       'port':None,
                       'realname':None,
                       'from_addr':None,
                       'maildir':None}
    conf = ConfigParser.SafeConfigParser(defaults=config_defaults)
    conf.read(config_file)
    maildir = conf.get('pmail', 'maildir') 
    if maildir:
        maildir = os.path.expanduser(maildir)
    smtpserver = conf.get('pmail', 'smtp_url') 
    port        = conf.get('pmail', 'port')
    from_addr   = conf.get('pmail', 'from')
    if conf.get('pmail', 'realname'):
        from_addr   = '"'+conf.get('pmail', 'realname')+'" <'+from_addr+'>'

import argparse
# Added RawTextHelpFormatter which means we have to do manual string wrapping
# but get to keep our line breaks.
#parser = argparse.ArgumentParser(description='Upload to TaitHub.',
#                                 formatter_class=argparse.RawTextHelpFormatter)
helpmsg="""
Required values are To, From, Body and Subject. (If you pass the
--no-editor argument you only need one of Body and Subject.)

If one of these values are missing (or you passed the --editor argument)
then the message will be opened up in an editor before sending.

Supports ~/.pmailrc file with contents ie:
    [pmail]
    from = me@example.com
    realname = Joe User
    smtp_url = smtp.example.com
"""
parser = argparse.ArgumentParser(description=helpmsg,
                                formatter_class=argparse.RawDescriptionHelpFormatter)
parser.add_argument('dest_addr', help='Destination Address',
                    metavar='foo@example.com', nargs='?',
                    default=argparse.SUPPRESS, action='append')
parser.add_argument('-t', '--to', help='Destination Address. Can be '+
                   'specified multiple times.', action='append',
                    metavar='foo@example.com', dest='dest_addr')
parser.add_argument('-s', '--subject', help='Subject',
                    metavar='"New TPS Report Templates"')
parser.add_argument('-a', '--attach',
                    help='Filename to attach. Can be specified multiple times.',
                    metavar='/path/to/TPS.pdf', action='append')
parser.add_argument('-c' ,'--cc',
                    help='CC Address. Can be specified multiple times.',
                    metavar='foo@example.com', action='append')
parser.add_argument('-b', '--bcc',
                    help='BCC Address. Can be specified multiple times.',
                    metavar='foo@example.com', action='append')
parser.add_argument('-f', '--from',
                    help='From address for envelope. Sets From header '+
                    'if absent from message.'+
                    ' Overrides pmailrc.', metavar='me@example.com',
                    dest='from_addr')
parser.add_argument('--server', help='SMTP server hostname. Overrides pmailrc',
                    metavar='smtp.example.com[:124]')
parser.add_argument('-e','--editor', help='Open message in editor before '+
                    'sending. Even if all the required values are present.',
                    metavar='myeditor', nargs='?', default='default')
parser.add_argument('-n','--no-editor', help="Don't open an editor if the "+
                    "message is missing a required value."
                    , action='store_true', default=False)

# Formatting options. Off by default but turned on by default when the editor
# is opened. Notes:
# Assume most people will want to see HTML mail.
# Those who want to see plaintext email will probably appreciate being told it
# is markdown if their MUA supports it, otherwise they won't care.
# Flowed is trickier because not many MUAs support it (right?) and
# because it requires adding a space to lines that are already indented
# which may make markdown messages look weird if the MUA doesn't support
# it.
parser.add_argument('--html', help="Parse the message body as "+
                    "markdown and use that to create a markdown+html"+
                    "multipart message."
                    , action='store_true', default=False)
parser.add_argument('--markdown', help="Mark the message body as "+
                    "markdown."
                    , action='store_true', default=False)
parser.add_argument('--flowed', help="Mark and format the message body as "+
                    "format=flowed (see rfc3676)."
                    , action='store_true', default=False)
parser.add_argument('--no-qp', help="Don't format non 7 bit clean (utf8) "+
                    "body parts as Quoted-Printabl, uses '8bit' instead."
                    , action='store_true', default=False)

args = parser.parse_args()

if args.server:
    if ':' in args.server:
        smtpserver, port = args.server.split(':')
    else:
        smtpserver = args.server

if not smtpserver:
    print >> sys.stderr, "No server specified in args or config file, can't proceed."
    exit(1)

if args.from_addr:
    from_addr = args.from_addr

EDITOR=os.environ.get('EDITOR','editor')
if args.editor and args.editor != 'default':
    EDITOR = args.editor


#  * read from stdin and construct message

import smtplib
from email.parser import Parser
from email.message import Message

msg = Message()
if not os.isatty(0):
    # If the first line(s) of stdin match "^[^\s|^:]+:" then Parser
    # assumes that they are headers.
    # If the first lines start with spaces, I think they are ignored.
    msg = Parser().parse(sys.stdin)

# Now open /dev/tty so we can ask the user things etc
if os.path.exists('/dev/tty'):
    try:
        sys.stdin = open('/dev/tty')
    except IOError:
        args.no_editor = True
        pass

#  * try to fill in message headers from the args
#    To, From, Subject should always be present even if we haven't got
#    values for them yet. This way thay will show up in the editor.

if args.dest_addr:
    msg['To'] = ", ".join(args.dest_addr)
if 'to' not in msg:
    msg['To'] = ""

if from_addr:
    if 'from' not in msg:
        msg['From'] = from_addr

if 'from' not in msg:
    msg['From'] = ""

if args.subject:
    if 'subject' in msg:
        del msg['subject']
    msg['Subject'] = args.subject
if 'subject' not in msg:
    msg['Subject'] = ""

# to, from, subject, attach, cc, bcc
if args.cc:
    for i in args.cc:
        msg['CC'] = i
if args.bcc:
    for i in args.bcc:
        msg['BCC'] = i
if args.attach:
    for i in args.attach:
        msg['Attach'] = i

def can_send(msg, args):
    if args.no_editor:
        return msg['to'] and msg['from'] and (msg.get_payload() or
                                                  msg['subject'])
    else:
        return msg['to'] and msg['from'] and msg.get_payload() and\
                                                  msg['subject']
#  * Write to tmpfile and open up editor

import tempfile
if not args.no_editor and (not can_send(msg, args) or args.editor != 'default'):
    # Since we are being called by a user give them another chance to
    # (un)set the formatting options.
    msg['Format']='qp,markdown,html,flowed'
    from subprocess import call
    import tempfile
    with tempfile.NamedTemporaryFile(suffix='.mail') as temp:
        temp.write(msg.as_string())
        temp.flush()
        call([EDITOR, temp.name],stdin=sys.stdin)
        temp.seek(0)
        if not temp.read(10):
            print >> sys.stderr, "Empty message, aborting."
            exit(0)
        temp.seek(0)
        msg = Parser().parse(temp)
    format_opts = reduce(sum, [k.split(",") for k, v in msg.get_params([], 'Format')])
    del msg['Format']
    if 'html' in format_opts:
        args.html = True
    else:
        args.html = False
    if 'markdown' in format_opts:
        args.markdown = True
    else:
        args.markdown = False
    if 'flowed' in format_opts:
        args.flowed = True
    else:
        args.flowed = False
    if 'qp' in format_opts:
        args.no_qp = False
    else:
        args.no_qp = True

if not from_addr:
    if 'from' in msg:
        from_addr = msg['from']

if not can_send(msg, args):
    if not msg['to']:
        print >> sys.stderr, "Warning: 'To' header is missing."
    if not from_addr:
        print >> sys.stderr, "Warning: 'From' header is missing."
    if not msg['subject']:
        print >> sys.stderr, "Warning: 'Subject' header is missing."
    if not msg.get_payload():
        print >> sys.stderr, "Warning: message body is missing."
    print >> sys.stderr, "Cannot proceed with this little information."
    with tempfile.NamedTemporaryFile(suffix='.mail',delete=False) as temp:
        temp.write(msg.as_string())
        temp.flush()
        print >> sys.stderr, "You can find the rejected message at",temp.name
    exit(1)

notrcpts = msg.get_all('to',failobj=[]) +\
           msg.get_all('cc',failobj=[]) +\
           msg.get_all('bcc',failobj=[])
rcpts = []
import re
for r in notrcpts:
    # split on comma, but not when it is in double quotes
    # http://stackoverflow.com/questions/2785755/
    rcpts = rcpts + re.split(''',(?=(?:[^"]|"[^"]*")*$)''',r)
rcpts = [x.strip() for x in rcpts if '@' in x]
del msg['bcc']

atts = msg.get_all('attach')
if not atts: atts=[]
del msg['attach']

# squash headers that can be specified multiple times. Not sure this is
# necesary.
for i in ['To','CC']:
    if len(msg.get_all(i, [])) > 1:
        l = msg.get_all(i)
        del msg[i]
        msg[i] = ", ".join(l)

# expand attachments paths
expanded = []
for a in atts:
    import glob as G
    a = os.path.expanduser(a)
    te = G.glob(a)
    if not te:
        print >> sys.stderr, "Warning: " + a + " not found."
        continue
    expanded.extend(te)
# create parts for later attachment
attMsgs=[]
for att in expanded:
    from email.mime.nonmultipart import MIMENonMultipart
    from email.mime.text import MIMEText
    from email.mime.image import MIMEImage
    from email.mime.audio import MIMEAudio
    from email.mime.multipart import MIMEMultipart
    from email.encoders import encode_base64
    import mimetypes
    from time import time
    if not os.path.isfile(att):
        # NOTE: this case should have been taken care of
        # by the glob(...) above.
        print >> sys.stderr, "Warning: " + att + " not found."
        continue
    # The python email-examples put the type as application/octet-stream
    # when encoding is not none because the file is encoded or
    # compressed. Presumably to get round spam filters? I don't see why
    # we shouldn't set a type of application/x-tar if that's what it is.
    # Especially because the only type of attachment I know of getting blocked
    # (exe) doesn't return an encoding here.
    ctype,encoding = mimetypes.guess_type(att)
    if ctype is None:
        ctype = "application/octet-stream"
        # Fall back to the magic module, if present.
        try:
            import magic
            mc = magic.open(magic.MAGIC_MIME_TYPE)
            mc.load()
            ctype = mc.file(att)
        except:
            pass
    maintype,subtype = ctype.split("/",1)
    with open(att,'rb') as f:
        if maintype == "text":
            aMsg = MIMEText(f.read(), _subtype=subtype)
        elif maintype == "image":
            aMsg = MIMEImage(f.read(), _subtype=subtype)
        elif maintype == "audio":
            aMsg = MIMEAudio(f.read(), _subtype=subtype)
        else:
            aMsg = MIMENonMultipart(maintype, subtype)
            aMsg.set_payload(f.read())
            encode_base64(aMsg)

    aMsg.add_header('Content-Disposition', 'attachment',
        filename=os.path.basename(att))
    # Used for refering to message parts/attachments. See rfc2392. Ostensibly
    # globally unique but in practice just to the current message.
    aMsg.add_header('Content-ID',
                    quote(os.path.basename(att))+'-'+str(int(time()))+'@'+os.uname()[1])
    attMsgs.extend([aMsg])

if args.flowed:
    # Add a space to an lines that already start with space or From any
    # UNQOUTED lines that start with '>'. Add a space to the
    # end of text lines in a block except for the last one.
    # Although not indented blocks no if the previous line started with
    # a non-letter. Maybe we can add reflow stuff to other blocks like
    # footnotes once we put the effort in to parse markdown.
    # This is supposed to signal to the MUA where it can reflow text
    # without breaking stuff, see rfc3676.
    # WARNING: This will mangle the message and may break more complex
    # markdown message bodies, disable it in that case.
    # NOTE: This may break the HTML produced by the markdown engine
    # below. This doesn't seem to be the case with pymarkdown though.
    newbody=""
    ll1=None
    for l in msg.get_payload().split("\n"):
        if l.startswith(" ") or l.startswith("From"):
            l=" "+l+"\n"
        else:
            l=l+"\n"
        if ll1 == None:
            ll1=l
            continue
        if len(ll1) > 2 and len(l) > 2 and ll1[0].isalpha() and l[0].isalpha():
            ll1=ll1.strip("\n")+" \n"
        newbody=newbody+ll1
        ll1=l
    newbody=newbody+ll1
    msg.set_payload(newbody)
    msg.set_param('format', 'flowed')

def chardet(payload):
    from email import charset
    # Use magic to check if 7bit clean, if so sends as us-ascii. If not
    # quoted-printable utf8.
    # Use the following to send raw utf8
    cs = "utf-8"
    if args.no_qp:
        charset.add_charset('utf-8', charset.SHORTEST, None, None )
    else:
        charset.add_charset('utf-8', charset.SHORTEST, charset.QP)
    # This accepts chars like the copyright symbol, which is 8bit. Then sets
    # "Content-Transfer-Encoding: 8bit", IMO 8bit ASCII makes no sense, hence
    # we use magic library.
    #try:
    #    msg.get_payload().encode('ascii')
    #except:
    #    cs = "ascii"
    try:
        import magic
        mc = magic.open(magic.MAGIC_MIME_ENCODING)
        mc.load()
        cs = mc.buffer(msg.get_payload())
    except:
        pass

    # Make sure the mail gets quoted properly if it does end up being sent as
    # QP. It seems that quopri encodes ' \n' as '=20' and quoprimime
    # encodes it as ' =\n'. Ie it uses a literal space then a QP soft line
    # break. Since then extra rfc822 hard line break follows that it
    # sure makes the resulting message look spacious when un-decoded.
    # These modules implement rfc1521 and rfc2045 respectively. Since
    # 2045 obsoletes 1521 presumably that is "more correct". Upon
    # reading rfc2045 it looks like having =20 terminate a line is
    # perfectly legal. So to do that we can either switch on cs and
    # manipulate the text manipulate the text part in the output of
    # msg.as_string(), write our own QP encoder (~44 loc in the
    # quoprimime module) or just use the old one.
    # Some differences between these two modules for python 3 are
    # documented here:
    #    http://bugs.python.org/issue18022
    if args.flowed:
        import email
        from quopri import encodestring
        email.quoprimime.body_encode = encodestring

    return cs

if attMsgs or args.html:
    from email.mime.text import MIMEText
    from email.mime.multipart import MIMEMultipart
    # The main multipart/mixed object. Will hold any attachments and/or
    # multipart/related body part.
    msgmp = MIMEMultipart()
    for k in msg.keys(): # steal the headers
        if k in ['Content-Type']: continue
        msgmp[k] = msg[k]
    # Used for multipart/related body if required. See rfc2387.
    # May have to add a type or start param but I assume any client that can
    # handle those should have no trouble parsing the full heirarchy anyway.
    mrel = MIMEMultipart('related')
    cs = chardet(msg.get_payload())
    try:
        if args.html:
            # They want html add a multipart/alternative part with
            # markdown+html in it.
            # Set this in case we fail we can still add the param for
            # the plan mail to mark it as markdown.
            args.markdown = True
            malt = MIMEMultipart('alternative')
            import markdown
            # XXX: Apparently pymarkdown footnotes extension requires
            # that footnotes are seperated by a blank line from whatever
            # follows ... looks like it's the check for 'elif not
            # blank_line and not DEF_RE.match(line):' in
            # extensions/footnotes.py::detectTabbed()
            # So just put them at the end of the block you are working on
            # rather then the end of the doc.
            html = markdown.markdown(msg.get_payload().decode(cs), ['extra', 'sane_lists'])
            for a in attMsgs:
                basename = os.path.basename(a.get_param('filename', '', 'Content-Disposition'))
                if not basename: continue
                # Split lines because python regex treats ^ as start of string.
                htmll = html.split('\n')
                for i,l in enumerate(htmll):
                    newbody = re.sub('(<img [^>]*src=")[^"]*{}(")'.format(basename),
                                     r"\1cid:{}\2".format(a['Content-ID']),
                                 l)
                    if newbody != l:
                        htmll[i]=newbody
                        op=a.get_params([], 'Content-Disposition')
                        if op and op[0][0] == 'inline': continue
                        del a['Content-Disposition']
                        a['Content-Disposition'] = 'inline'
                        for k, v in op:
                            if k == 'attachment': continue
                            a.set_param(k, v, 'Content-Disposition')
                        mrel.attach(a)
                html="\n".join(htmll)
            mtext=MIMEText(msg.get_payload(),"plain",cs)
            mtext.set_param('markup', 'markdown', 'Content-Type')
            if args.flowed:
                mtext.set_param('format', 'flowed', 'Content-Type')
            malt.attach(mtext)
            malt.attach(MIMEText(html,"html",cs))
            if attMsgs:
                if mrel.get_payload():
                    # Put the multipart/alternative body part it the top of the
                    # message.
                    mrel.set_payload([malt]+mrel.get_payload())
                    msgmp.attach(mrel)
                else:
                    msgmp.attach(malt)
            else:
                msgmp = malt
    except ImportError:
        # Fall back to looking for system markdown or pandoc?
        print >>sys.stderr, "Can't import pymarkdown, "+\
        "not adding text/html part."

    # Not html or html failed
    if not msgmp.get_payload():
        mtext=MIMEText(msg.get_payload(),"plain",cs)
        # Content-Type: text/plain; markup=markdown to let non markdown aware
        # clients see this part as text and others to parse it as markdown.
        # http://blog.freron.com/2011/thoughts-on-writing-emails-using-markdown/
        if args.markdown:
            mtext.set_param('markup', 'markdown', 'Content-Type')
        if args.flowed:
            mtext.set_param('format', 'flowed', 'Content-Type')
        msgmp.attach(mtext)

    for aMsg in attMsgs:
        cdparams = aMsg.get_params([], 'Content-Disposition')
        if cdparams and cdparams[0][0] == 'inline':
            # handled already in multipart/related
            continue
        msgmp.attach(aMsg)

    # we no longer need the original msg, so just overwrite:
    msg = msgmp

elif args.markdown:
    msg.set_param('markup', 'markdown', 'Content-Type')
    # Ensure quoting
    cs = chardet(msg.get_payload())
    msg.set_charset(cs)

# Date header, the MTA should add one, but we need it for
# archiving localy. (See below)
from email.Utils import formatdate
if 'date' not in msg:
    msg['Date'] = formatdate(localtime=True)

# msgid added here for the same reason as date above
from email.Utils import make_msgid
if 'message-id' not in msg:
    msg['Message-ID'] = make_msgid()

# TODO: SSL:
# https://github.com/wes1138/SviMTP/blob/master/after/ftplugin/mail_svimtp.vim#L221
s = smtplib.SMTP(smtpserver, port or 25)
# TODO: Handle exceptions?
try:
    refused = s.sendmail(from_addr, rcpts, msg.as_string())
except smtplib.SMTPRecipientsRefused, e:
    with tempfile.NamedTemporaryFile(suffix='.mail',delete=False) as temp:
        temp.write(msg.as_string())
        temp.flush()
        print >>sys.stderr, "Error while sending message: %s" % e
        print >> sys.stderr, "Recipients:",rcpts
        print >>sys.stderr, "You can find the rejected message at",temp.name
        exit(1)
s.quit()

if len(refused) > 0:
    print >> sys.stderr, "Some messages could not be delivered."
    print >> sys.stderr, "Recipients:",rcpts
    with tempfile.NamedTemporaryFile(suffix='.mail',delete=False) as temp:
        temp.write(msg.as_string())
        temp.flush()
        print >>sys.stderr, "You can find the rejected message at",temp.name
    print >> sys.stderr, refused

# save in maildir
# from https://github.com/pazz/alot/blob/master/alot/account.py
# see that if you want to support mbox dests too. (ie, add another
# config file entry)
import mailbox
def store_mail(mbx, mail):
    if not isinstance(mbx, mailbox.Mailbox):
        print >> sys.stderr, 'Not a mailbox'
        return False

    mbx.lock()
    if isinstance(mbx, mailbox.Maildir):
        msg = mailbox.MaildirMessage(mail)
        msg.set_flags('S')
    else:
        msg = mailbox.Message(mail)

    try:
        message_id = mbx.add(msg)
        mbx.flush()
        mbx.unlock()
    except Exception as e:
        print >> sys.stderr, "Unexpected error when storing message"
        print >> sys.stderr, e

# TODO: user arg to try chown the mail file to?
if maildir:
    try:
        mbx = mailbox.Maildir(maildir)
        store_mail(mbx, msg)
    except (IOError, OSError) as e:
        if e.errno in [13]:
            #Permission denied
            pass
        else:
            print >>sys.stderr, "Failed to store sent mail in", maildir
            print >>sys.stderr, str(e)
            exit(1)

if len(refused) > 0:
    exit(1)
